#!/bin/bash

# Dette skriptet tester at alle lemmaene i noun-sje-lex.txt kan genereres.
# De som ikke kan genereres, kopieres til missingNounLemmas.txt

###### Variables: #######
sourcefile=${srcdir}/../../../src/morphology/stems/nouns.lexc
generatorfile=./../../../src/generator-gt-norm
resultfile=missingNounLemmas

# Check that the source file exists:
if [ ! -f "$sourcefile" ]; then
	echo Source file not found: $sourcefile
	exit 1
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if [ -z $fsttype ]; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

###### Extraction: #######
# extract non-compounding lemmas:
grep ";" $sourcefile | grep -v "^\!" \
	| egrep -v "(CmpN/Only|\+Gen\+|\+Der\+| R |RHyph)" | sed 's/% /€/g' \
	| sed 's/%:/¢/g' | tr ":+\t" " " | cut -d " " -f1 | tr -d "#" \
	| tr "€" " " | tr "¢" ":" \
	| sort -u | grep -v '^$' > nouns.txt

# extract compounding lemmas:
grep ";" $sourcefile | grep -v "^\!" \
	| grep ' R '| tr ":+\t" " " | cut -d " " -f1 | tr -d "#" \
	| sort -u > Rnouns.txt
# extract compounding lemmas requiring hyphen:
grep ";" $sourcefile | grep -v "^\!" \
	| grep ' RHyph '| tr ":+\t" " " | cut -d " " -f1 | tr -d "#" \
	| sort -u > RHnouns.txt

###### Start testing: #######
transducer_found=0
Fail=0

for f in $fsttype; do
	if [ $f == "xfst" ]; then
		lookuptool="@LOOKUP@ -q -flags mbTT"
		suffix="xfst"
	elif [ $f == "hfst" ]; then
		lookuptool="@HFST_LOOKUP@ -q"
		suffix="hfstol"
	else
	    Fail=1
		echo "Unknown fst type!"
	    echo "$f - FAIL"
	    continue
	fi
	if [ -f "$generatorfile.$suffix" ]; then
		let "transducer_found += 1"

###### Test non-comopunds: #######
		# generate nouns in Singular, extract the resulting generated lemma,
		# store it:
		sed 's/$/+N+Sg+Nom/' nouns.txt | $lookuptool $generatorfile.$suffix \
			| cut -f2 | grep -v "N+" | grep -v "^$" | sort -u > analnouns.$f.txt 
		# Generate nouns, extract those that do not generate in singular,
		# generate the rest in plural:
		sed 's/$/+N+Sg+Nom/' nouns.txt | $lookuptool $generatorfile.$suffix \
			| cut -f2 | grep "N+" | cut -d "+" -f1 | sed 's/$/+N+Pl+Nom/' \
			| $lookuptool $generatorfile.$suffix | cut -f2 \
			| grep -v "^$" >> analnouns.$f.txt 

###### Test comopunds: #######
		# Test nouns that only can generate as compounds:
		sed 's/$/+N+Cmp#bijlla+N+Sg+Nom/' Rnouns.txt \
			| $lookuptool $generatorfile.$suffix | cut -f2 | sed 's/bijlla$//' \
			| grep -v '^$' >> Ranalnouns.$f.txt
		sed 's/$/+N+Cmp-#bijlla+N+Sg+Nom/' RHnouns.txt \
			| $lookuptool $generatorfile.$suffix | cut -f2 | sed 's/\-bijlla$//' \
			| grep -v '^$' >> RHanalnouns.$f.txt

###### Collect results: #######
		# Sort and compare original input with resulting output - the diff is
		# stored and opened in SEE:
		sort -u -o analnouns.$f.txt analnouns.$f.txt 
		sort -u -o Ranalnouns.$f.txt Ranalnouns.$f.txt 
		sort -u -o RHanalnouns.$f.txt RHanalnouns.$f.txt 
		comm -23 nouns.txt analnouns.$f.txt > $resultfile.$f.txt
		comm -23 Rnouns.txt Ranalnouns.$f.txt >> $resultfile.$f.txt
		comm -23 RHnouns.txt RHanalnouns.$f.txt >> $resultfile.$f.txt

		# if at least one word is found, the test failed, and the list of failed
		# lemmas is opened in SubEthaEdit:
		if [ `wc -w $resultfile.$f.txt | tr -s ' ' | cut -d' ' -f2` -gt 0 ]; then
			# Only open the failed lemmas in see if @SEE@ is defined:
			if [ "$EXTEDITOR" ]; then
				$EXTEDITOR $resultfile.$f.txt
			fi
		    Fail=1
		    echo "$f - FAIL"
		    continue
		fi
	    echo "$f - PASS"
	fi
done

# Delete temporary files:
rm -f *nouns.*.txt

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
	exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo No transducer found
    exit 1
fi
